<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestEase</name>
    </assembly>
    <members>
        <member name="T:RestEase.ApiException">
            <summary>
            Exception thrown when a bad API response is received
            </summary>
        </member>
        <member name="P:RestEase.ApiException.RequestMethod">
            <summary>
            Gets the method used to make the request which failed
            </summary>
        </member>
        <member name="P:RestEase.ApiException.RequestUri">
            <summary>
            Gets the URI to which the request which failed was made
            </summary>
        </member>
        <member name="P:RestEase.ApiException.StatusCode">
            <summary>
            Gets the HTTP status code received
            </summary>
        </member>
        <member name="P:RestEase.ApiException.ReasonPhrase">
            <summary>
            Gets the ReasonPhrase associated with the response
            </summary>
        </member>
        <member name="P:RestEase.ApiException.Headers">
            <summary>
            Gets the headers associated with the response
            </summary>
        </member>
        <member name="P:RestEase.ApiException.ContentHeaders">
            <summary>
            Gets the content headers associated with the response
            </summary>
        </member>
        <member name="P:RestEase.ApiException.Content">
            <summary>
            Gets the content associated with the response, if any
            </summary>
        </member>
        <member name="P:RestEase.ApiException.HasContent">
            <summary>
            Gets a value indicating whether any content is associated with the response
            </summary>
        </member>
        <member name="M:RestEase.ApiException.#ctor(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.ApiException"/> class with the given <see cref="T:System.Net.Http.HttpResponseMessage"/>
            </summary>
            <param name="request">Request which triggered the exception</param>
            <param name="response"><see cref="T:System.Net.Http.HttpResponseMessage"/> provided by the <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="contentString">String content, as read from <see cref="M:System.Net.Http.HttpContent.ReadAsStringAsync"/>, if there is a response content</param>
        </member>
        <member name="M:RestEase.ApiException.#ctor(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.String,RestEase.IApiExceptionContentDeserializer)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.ApiException"/> class with the given <see cref="T:System.Net.Http.HttpResponseMessage"/>,
            which can deserialize the responses
            </summary>
            <param name="request">Request which triggered the exception</param>
            <param name="response"><see cref="T:System.Net.Http.HttpResponseMessage"/> provided by the <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="contentString">String content, as read from <see cref="M:System.Net.Http.HttpContent.ReadAsStringAsync"/>, if there is a response content</param>
            <param name="contentDeserializer">Deserializer to deserialize the content, used by <see cref="M:RestEase.ApiException.DeserializeContent``1"/></param>
        </member>
        <member name="M:RestEase.ApiException.#ctor(System.Net.Http.HttpMethod,System.Uri,System.Net.HttpStatusCode,System.String,System.Net.Http.Headers.HttpResponseHeaders,System.Net.Http.Headers.HttpContentHeaders,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.ApiException"/> class with the given components
            </summary>
            <param name="requestMethod"><see cref="T:System.Net.Http.HttpMethod"/> used to make the request which failed</param>
            <param name="requestUri"><see cref="T:System.Uri"/> to which the request which failed was made</param>
            <param name="statusCode"><see cref="T:System.Net.HttpStatusCode"/> returned by the endpoint</param>
            <param name="reasonPhrase"><see cref="P:System.Net.Http.HttpResponseMessage.ReasonPhrase"/> provided by <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="headers"><see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/>s associated with the response</param>
            <param name="contentHeaders"><see cref="T:System.Net.Http.Headers.HttpContentHeaders"/> associated with the response content, if there is a response content</param>
            <param name="contentString">String content, as read from <see cref="M:System.Net.Http.HttpContent.ReadAsStringAsync"/>, if there is a response content</param>
        </member>
        <member name="M:RestEase.ApiException.#ctor(System.Net.Http.HttpMethod,System.Uri,System.Net.HttpStatusCode,System.String,System.Net.Http.Headers.HttpResponseHeaders,System.Net.Http.Headers.HttpContentHeaders,System.String,RestEase.IApiExceptionContentDeserializer)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.ApiException"/> class with the given components,
            which can deserialize the responses
            </summary>
            <param name="requestMethod"><see cref="T:System.Net.Http.HttpMethod"/> used to make the request which failed</param>
            <param name="requestUri"><see cref="T:System.Uri"/> to which the request which failed was made</param>
            <param name="statusCode"><see cref="T:System.Net.HttpStatusCode"/> returned by the endpoint</param>
            <param name="reasonPhrase"><see cref="P:System.Net.Http.HttpResponseMessage.ReasonPhrase"/> provided by <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="headers"><see cref="T:System.Net.Http.Headers.HttpResponseHeaders"/>s associated with the response</param>
            <param name="contentHeaders"><see cref="T:System.Net.Http.Headers.HttpContentHeaders"/> associated with the response content, if there is a response content</param>
            <param name="contentString">String content, as read from <see cref="M:System.Net.Http.HttpContent.ReadAsStringAsync"/>, if there is a response content</param>
            <param name="contentDeserializer">Deserializer to deserialize the content, used by <see cref="M:RestEase.ApiException.DeserializeContent``1"/></param>
        </member>
        <member name="M:RestEase.ApiException.CreateAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Create a new <see cref="T:RestEase.ApiException"/>, by reading the response asynchronously content as a string
            </summary>
            <param name="request">Request which triggered the exception</param>
            <param name="response">Response received from the <see cref="T:System.Net.Http.HttpClient"/></param>
            <returns>A new <see cref="T:RestEase.ApiException"/> created from the <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:RestEase.ApiException.CreateAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,RestEase.IApiExceptionContentDeserializer)">
            <summary>
            Create a new <see cref="T:RestEase.ApiException"/>, by reading the response asynchronously content as a string,
            which can deserialize responses
            </summary>
            <param name="request">Request which triggered the exception</param>
            <param name="response">Response received from the <see cref="T:System.Net.Http.HttpClient"/></param>
            <param name="contentDeserializer">Deserializer to deserialize the content, used by <see cref="M:RestEase.ApiException.DeserializeContent``1"/></param>
            <returns>A new <see cref="T:RestEase.ApiException"/> created from the <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
        </member>
        <member name="M:RestEase.ApiException.DeserializeContent``1">
            <summary>
            Attempts to deserialize <see cref="P:RestEase.ApiException.Content"/> as the given type
            </summary>
            <remarks>
            This can be useful if particular error responses codes are associated with different sorts of
            response content. However make sure that you are attempting to deserialize the response as the
            correct type, otherwise it is likely that the deserializer will throw an exception or return an
            invalid response.
            </remarks>
            <typeparam name="T">The type to deserialize <see cref="P:RestEase.ApiException.Content"/> as</typeparam>
            <returns>The deserializer's attempt to deserialize <see cref="P:RestEase.ApiException.Content"/> as <typeparamref name="T"/></returns>
        </member>
        <member name="T:RestEase.IApiExceptionContentDeserializer">
            <summary>
            Deserializer used by <see cref="M:RestEase.ApiException.DeserializeContent``1"/> to deserialize its response content
            </summary>
            <remarks>This is needed to encapsulate information required by the deserializer</remarks>
        </member>
        <member name="M:RestEase.IApiExceptionContentDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserialize the given content as the given type
            </summary>
            <typeparam name="T">Type to deserialize as</typeparam>
            <param name="content">Content to deserialize</param>
            <returns>Deserialized content</returns>
        </member>
        <member name="T:RestEase.Implementation.BodyParameterInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired request body
            </summary>
        </member>
        <member name="P:RestEase.Implementation.BodyParameterInfo.SerializationMethod">
            <summary>
            Gets or sets the method to use to serialize the body
            </summary>
        </member>
        <member name="P:RestEase.Implementation.BodyParameterInfo.ObjectValue">
            <summary>
            Gets the body to serialize, as an object
            </summary>
        </member>
        <member name="M:RestEase.Implementation.BodyParameterInfo.#ctor(RestEase.BodySerializationMethod,System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.BodyParameterInfo`1"/> class
            </summary>
            <param name="serializationMethod">Method to use the serialize the body</param>
            <param name="objectValue">Body to serialize, as an object</param>
        </member>
        <member name="M:RestEase.Implementation.BodyParameterInfo.SerializeValue(RestEase.RequestBodySerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the (typed) value using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use if the value implements <see cref="T:System.IFormattable"/></param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.BodyParameterInfo`1">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired request body
            </summary>
            <typeparam name="T">Type of the value</typeparam>
        </member>
        <member name="P:RestEase.Implementation.BodyParameterInfo`1.Value">
            <summary>
            Gets the body to serialize
            </summary>
        </member>
        <member name="M:RestEase.Implementation.BodyParameterInfo`1.#ctor(RestEase.BodySerializationMethod,`0)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.BodyParameterInfo`1"/> class
            </summary>
            <param name="serializationMethod">Method to use the serialize the body</param>
            <param name="value">Body to serialize</param>
        </member>
        <member name="M:RestEase.Implementation.BodyParameterInfo`1.SerializeValue(RestEase.RequestBodySerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the (typed) value using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use if the value implements <see cref="T:System.IFormattable"/></param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.DictionaryIterator">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Helper to iterate both IDictionary and IDictionary{TKey, TValue} instances, as if both were IEnumerable{KeyValuePair{object, object}}
            </summary>
        </member>
        <member name="M:RestEase.Implementation.DictionaryIterator.CanIterate(System.Type)">
            <summary>
            Returns true if we're capable of iterating the supplied type
            </summary>
            <param name="dictionaryType">Type to check</param>
            <returns>True if we're capable of iterating it</returns>
        </member>
        <member name="M:RestEase.Implementation.DictionaryIterator.Iterate(System.Object)">
            <summary>
            Iterates the given IDictionary or IDictionary{TKey, TValue} as if it was an IEnumerable{KeyValuePair{object, object}}
            </summary>
            <param name="dictionary">Dictionary to iterate</param>
            <returns>The equivalent IEnumerable{KeyValuePair{object, object}}</returns>
        </member>
        <member name="T:RestEase.Implementation.HeaderParameterInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired header parameter
            </summary>
        </member>
        <member name="M:RestEase.Implementation.HeaderParameterInfo.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.HeaderParameterInfo`1">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired header parameter
            </summary>
            <typeparam name="T">Type of the value</typeparam>
        </member>
        <member name="M:RestEase.Implementation.HeaderParameterInfo`1.#ctor(System.String,`0,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.HeaderParameterInfo`1"/> class
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
            <param name="defaultValue">Default value of the header, used if <paramref name="value"/> is null</param>
            <param name="format"></param>
        </member>
        <member name="M:RestEase.Implementation.HeaderParameterInfo`1.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.HttpRequestMessagePropertyInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Structure containing information about a desired HTTP request message property
            </summary>
        </member>
        <member name="P:RestEase.Implementation.HttpRequestMessagePropertyInfo.Key">
            <summary>
            Key of the key/value pair
            </summary>
        </member>
        <member name="P:RestEase.Implementation.HttpRequestMessagePropertyInfo.Value">
            <summary>
            Value of the key/value pair
            </summary>
        </member>
        <member name="M:RestEase.Implementation.HttpRequestMessagePropertyInfo.#ctor(System.String,System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.HttpRequestMessagePropertyInfo"/> Structure
            </summary>
            <param name="key">Key of the key/value pair</param>
            <param name="value">Value of the key/value pair</param>
        </member>
        <member name="T:RestEase.Implementation.ImplementationCreationException">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Exception thrown if an interface implementation cannot be created
            </summary>
        </member>
        <member name="P:RestEase.Implementation.ImplementationCreationException.Code">
            <summary>
            Gets the code of this error
            </summary>
        </member>
        <member name="M:RestEase.Implementation.ImplementationCreationException.#ctor(RestEase.Implementation.DiagnosticCode,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.ImplementationCreationException"/> class
            </summary>
            <param name="code">Code of this error</param>
            <param name="message">Message to use</param>
        </member>
        <member name="M:RestEase.Implementation.ImplementationCreationException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.ImplementationCreationException"/> class
            </summary>
            <param name="message">Message to use</param>
        </member>
        <member name="M:RestEase.Implementation.ImplementationCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.ImplementationCreationException"/> class
            </summary>
            <param name="message">Message to use</param>
            <param name="innerException">InnerException to use</param>
        </member>
        <member name="T:RestEase.Implementation.ImplementationHelpers">
            <summary>
            Internal type. Do not use! Helper methods called from generated code
            </summary>
        </member>
        <member name="M:RestEase.Implementation.ImplementationHelpers.GetInterfaceMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Internal method. Do not call.
            </summary>
        </member>
        <member name="T:RestEase.Implementation.ModifyingClientHttpHandler">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            HttpClientHandler which uses a delegate to modify requests
            </summary>
        </member>
        <member name="M:RestEase.Implementation.ModifyingClientHttpHandler.#ctor(RestEase.RequestModifier)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.ModifyingClientHttpHandler"/> class,
            using the given delegate to modify requests
            </summary>
            <param name="requestModifier">Delegate to use to modify requests</param>
        </member>
        <member name="M:RestEase.Implementation.ModifyingClientHttpHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will
            not block.
            </summary>
            <param name="request">The HTTP request message</param>
            <param name="cancellationToken">A cancellation token to cancel the operation</param>
            <returns>Returns System.Threading.Tasks.Task{TResult}.The task object representing
            the asynchronous operation</returns>
        </member>
        <member name="T:RestEase.Implementation.PathParameterInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired path parameter
            </summary>
        </member>
        <member name="P:RestEase.Implementation.PathParameterInfo.UrlEncode">
            <summary>
            Gets a value indicating whether this path parameter should be URL-encoded
            </summary>
        </member>
        <member name="P:RestEase.Implementation.PathParameterInfo.SerializationMethod">
            <summary>
            Gets the method to use to serialize the path parameter.
            </summary>
        </member>
        <member name="M:RestEase.Implementation.PathParameterInfo.SerializeValue(RestEase.RequestPathParamSerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.PathParameterInfo.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.PathParameterInfo`1">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired path parameter
            </summary>
            <typeparam name="T">Type of the value</typeparam>
        </member>
        <member name="M:RestEase.Implementation.PathParameterInfo`1.#ctor(System.String,`0,System.String,System.Boolean,RestEase.PathSerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.PathParameterInfo`1"/> Structure
            </summary>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
            <param name="urlEncode">Indicates whether this parameter should be url-encoded</param>
            <param name="serializationMethod">Method to use to serialize the path value.</param>
        </member>
        <member name="M:RestEase.Implementation.PathParameterInfo`1.SerializeValue(RestEase.RequestPathParamSerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.PathParameterInfo`1.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a name -> value pair using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.QueryParameterInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired query parameter
            </summary>
        </member>
        <member name="P:RestEase.Implementation.QueryParameterInfo.SerializationMethod">
            <summary>
            Gets or sets the method to use to serialize the query parameter
            </summary>
        </member>
        <member name="M:RestEase.Implementation.QueryParameterInfo.SerializeValue(RestEase.RequestQueryParamSerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the (typed) value into a collection of name -> value pairs using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.QueryParameterInfo.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a collection of name -> value pairs using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.QueryParameterInfo`1">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a desired query parameter
            </summary>
            <typeparam name="T">Type of the value</typeparam>
        </member>
        <member name="M:RestEase.Implementation.QueryParameterInfo`1.#ctor(RestEase.QuerySerializationMethod,System.String,`0,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.QueryParameterInfo`1"/> class
            </summary>
            <param name="serializationMethod">Method to use the serialize the query value</param>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.QueryParameterInfo`1.SerializeValue(RestEase.RequestQueryParamSerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the (typed) value into a collection of name -> value pairs using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.QueryParameterInfo`1.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a collection of name -> value pairs using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.QueryCollectionParameterInfo`1">
            <summary>
            Class containing information about collection of a desired query parameters
            </summary>
            <typeparam name="T">Element type of the value</typeparam>
        </member>
        <member name="M:RestEase.Implementation.QueryCollectionParameterInfo`1.#ctor(RestEase.QuerySerializationMethod,System.String,System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.QueryCollectionParameterInfo`1"/> class
            </summary>
            <param name="serializationMethod">Method to use the serialize the query values</param>
            <param name="name">Name of the name/values pair</param>
            <param name="values">Values of the name/values pair</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.QueryCollectionParameterInfo`1.SerializeValue(RestEase.RequestQueryParamSerializer,RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Serialize the (typed) value into a collection of name -> value pairs using the given serializer
            </summary>
            <param name="serializer">Serializer to use</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.QueryCollectionParameterInfo`1.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a collection of name -> value pairs using its ToString method
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> given to the <see cref="T:RestEase.Implementation.Requester"/>, if any</param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.RawQueryParameterInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a raw query parameter
            </summary>
        </member>
        <member name="M:RestEase.Implementation.RawQueryParameterInfo.SerializeToString(System.IFormatProvider)">
            <summary>
            Serialize the value into a string
            </summary>
            <param name="formatProvider"><see cref="T:System.IFormatProvider"/> to use if the value implements <see cref="T:System.IFormattable"/></param>
            <returns>Serialized value</returns>
        </member>
        <member name="T:RestEase.Implementation.RawQueryParameterInfo`1">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information about a raw query parameter
            </summary>
            <typeparam name="T">Type of value providing the raw query parameter</typeparam>
        </member>
        <member name="M:RestEase.Implementation.RawQueryParameterInfo`1.#ctor(`0)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.RawQueryParameterInfo`1"/> class
            </summary>
            <param name="value">Value which provides the raw query parameter</param>
        </member>
        <member name="M:RestEase.Implementation.RawQueryParameterInfo`1.SerializeToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:RestEase.Implementation.Requester">
             <summary>
             INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
             Class used by generated implementations to make HTTP requests
             </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.ResponseDeserializer">
            <summary>
            Gets or sets the deserializer used to deserialize responses
            </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.RequestBodySerializer">
            <summary>
            Gets or sets the serializer used to serialize request bodies (when [Body(BodySerializationMethod.Serialized)] is used)
            </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.RequestPathParamSerializer">
            <summary>
            Gets or sets the serializer used to serialize path parameters (when [Path(PathSerializationMethod.Serialized)] is used)
            </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.RequestQueryParamSerializer">
            <summary>
            Gets or sets the serializer used to serialize query parameters (when [Query(QuerySerializationMethod.Serialized)] is used)
            </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.QueryStringBuilder">
            <summary>
            Gets or sets the builder used to construct query strings, if any
            </summary>
        </member>
        <member name="P:RestEase.Implementation.Requester.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:System.IFormatProvider"/> used to format items using <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
            <remarks>
            Defaults to null, in which case the current culture is used.
            </remarks>
        </member>
        <member name="M:RestEase.Implementation.Requester.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.Requester"/> class, using the given HttpClient
            </summary>
            <param name="httpClient">HttpClient to use to make requests</param>
        </member>
        <member name="M:RestEase.Implementation.Requester.SubstitutePathParameters(System.String,RestEase.IRequestInfo)">
            <summary>
            Takes the PathParams and PathProperties from the given IRequestInfo, and constructs a path with
            placeholders substituted for their desired values.
            </summary>
            <remarks>
            Note that this method assumes that valdation has occurred. That is, there won't by any
            placeholders with no value, or values without a placeholder.
            </remarks>
            <param name="path">Path to substitute placeholders in</param>
            <param name="requestInfo">IRequestInfo to get Path, PathParams, and PathProperties from</param>
            <returns>The constructed path, with placeholders substituted for their actual values</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.ConstructUri(System.String,System.String,System.String,RestEase.IRequestInfo)">
            <summary>
            Given an IRequestInfo and pre-substituted relative path, constructs a URI with the right query parameters
            </summary>
            <param name="baseAddress">Base address to start with, with placeholders already substituted</param>
            <param name="basePath">Base path to start with, with placeholders already substituted</param>
            <param name="path">Path to start with, with placeholders already substituted</param>
            <param name="requestInfo">IRequestInfo to retrieve the query parameters from</param>
            <returns>Constructed URI; relative if 'path' was relative, otherwise absolute</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.BuildQueryParam(System.String,System.Collections.Generic.IEnumerable{RestEase.Implementation.RawQueryParameterInfo},System.Collections.Generic.IEnumerable{RestEase.Implementation.QueryParameterInfo},System.Collections.Generic.IEnumerable{RestEase.Implementation.QueryParameterInfo},RestEase.IRequestInfo)">
            <summary>
            Build up a query string from the initial query string, raw query parameter, and any query params (which need to be combined)
            </summary>
            <param name="initialQueryString">Initial query string, present from the URI the user specified in the Get/etc parameter</param>
            <param name="rawQueryParameters">The raw query parameters, if any</param>
            <param name="queryParams">The query parameters which need serializing (or an empty collection)</param>
            <param name="queryProperties">The query parameters from properties which need serialializing (or an empty collection)</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <returns>Query params combined into a query string</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.SerializeBodyForUrlEncoding(System.Object)">
            <summary>
            Given an object, attempt to serialize it into a form suitable for URL Encoding
            </summary>
            <remarks>Currently only supports objects which implement IDictionary</remarks>
            <param name="body">Object to attempt to serialize</param>
            <returns>Key/value collection suitable for URL encoding</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.TransformDictionaryToCollectionOfKeysAndValues(System.Object)">
            <summary>
            Takes an IDictionary or IDictionary{TKey, TValue}, and emits KeyValuePairs for each key
            Takes account of IEnumerable values, null values, etc
            </summary>
            <param name="dictionary">Dictionary to transform</param>
            <returns>A set of KeyValuePairs</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.SerializePathParameter(RestEase.Implementation.PathParameterInfo,RestEase.IRequestInfo)">
            <summary>
            Serializes the value of a path parameter, using an appropriate method
            </summary>
            <param name="pathParameter">Path parameter to serialize</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.SerializeQueryParameter(RestEase.Implementation.QueryParameterInfo,RestEase.IRequestInfo)">
            <summary>
            Serializes the value of a query parameter, using an appropriate method
            </summary>
            <param name="queryParameter">Query parameter to serialize</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.ConstructContent(RestEase.IRequestInfo)">
            <summary>
            Given an IRequestInfo which may have a BodyParameterInfo, construct a suitable HttpContent for it if possible
            </summary>
            <param name="requestInfo">IRequestInfo to get the BodyParameterInfo for</param>
            <returns>null if no body is set, otherwise a suitable HttpContent (StringContent, StreamContent, FormUrlEncodedContent, etc)</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.ApplyHeaders(RestEase.IRequestInfo,System.Net.Http.HttpRequestMessage)">
            <summary>
            Given an IRequestInfo containing a number of class/method/param headers, and a HttpRequestMessage,
            add the headers to the message, taing priority and overriding into account
            </summary>
            <param name="requestInfo">IRequestInfo to get the headers from</param>
            <param name="requestMessage">HttpRequestMessage to add the headers to</param>
        </member>
        <member name="M:RestEase.Implementation.Requester.ApplyHeadersSet(RestEase.IRequestInfo,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean)">
            <summary>
            Given a set of headers, apply them to the given HttpRequestMessage. Headers will override any of that type already present
            </summary>
            <param name="requestInfo">RequestInfo for this request</param>
            <param name="requestMessage">HttpRequestMessage to add the headers to</param>
            <param name="headers">Headers to add</param>
            <param name="areMethodHeaders">True if these headers came from the method, false if they came from the class</param>
        </member>
        <member name="M:RestEase.Implementation.Requester.ToStringHelper``1(``0)">
            <summary>
            Serializes an item to a string using <see cref="P:RestEase.Implementation.Requester.FormatProvider"/> if the object implements <see cref="T:System.IFormattable"/>
            </summary>
            <typeparam name="T">Type of the value being serialized</typeparam>
            <param name="value">Value being serialized</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.SendRequestAsync(RestEase.IRequestInfo,System.Boolean)">
            <summary>
            Given an IRequestInfo, construct a HttpRequestMessage, send it, check the response for success, then return it
            </summary>
            <param name="requestInfo">IRequestInfo to construct the request from</param>
            <param name="readBody">True to pass HttpCompletionOption.ResponseContentRead, meaning that the body is read here</param>
            <returns>Resulting HttpResponseMessage</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.EnsureSuccessfulResponseIfNecessary(RestEase.IRequestInfo,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Take the <see cref="T:System.Net.Http.HttpResponseMessage"/> we received from then endpoint, check whether it was successful, and throw if not.
            </summary>
            <param name="requestInfo">IRequestInfo that was used to construct the original HttpRequestMessage</param>
            <param name="request">HttpRequestMessage that was sent to the endpoint</param>
            <param name="response">HttpResponseMessage which received from the endpoint</param>
        </member>
        <member name="M:RestEase.Implementation.Requester.Deserialize``1(System.String,System.Net.Http.HttpResponseMessage,RestEase.IRequestInfo)">
            <summary>
            Calls this.ResponseDeserializer.ReadAndDeserializeAsync, after checking it's not null
            </summary>
            <typeparam name="T">Type of object to deserialize into</typeparam>
            <param name="content">String content read from the response</param>
            <param name="response">Response to deserialize from</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <returns>A task containing the deserialized response</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.RequestVoidAsync(RestEase.IRequestInfo)">
            <summary>
            Called from interface methods which return a Task
            </summary>
            <param name="requestInfo">IRequestInfo to construct the request from</param>
            <returns>Task which completes when the request completed</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.RequestAsync``1(RestEase.IRequestInfo)">
            <summary>
            Called from interface methods which return a Task{CustomType}. Deserializes and returns the response
            </summary>
            <typeparam name="T">Type of the response, to deserialize into</typeparam>
            <param name="requestInfo">IRequestInfo to construct the request from</param>
            <returns>Task resulting in the deserialized response</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.RequestWithResponseMessageAsync(RestEase.IRequestInfo)">
            <summary>
            Called from interface methods which return a Task{HttpResponseMessage}
            </summary>
            <param name="requestInfo">IRequestInfo to construct the request from</param>
            <returns>Task containing the result of the request</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.RequestWithResponseAsync``1(RestEase.IRequestInfo)">
            <summary>
            Called from interface methods which return a Task{Response{T}}
            </summary>
            <typeparam name="T">Type of the response, to deserialize into</typeparam>
            <param name="requestInfo">IRequestInfo to construct the request from</param>
            <returns>Task containing a Response{T}, which contains the raw HttpResponseMessage, and its deserialized content</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.RequestStreamAsync(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task{Stream}
            </summary>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="M:RestEase.Implementation.Requester.Dispose">
            <summary>
            Disposes the underlying <see cref="T:System.Net.Http.HttpClient"/>
            </summary>
        </member>
        <member name="T:RestEase.Implementation.RequestInfo">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Class containing information to construct a request from.
            An instance of this is created per request by the generated interface implementation
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.Method">
            <summary>
            Gets the HttpMethod which should be used to make the request
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.BaseAddress">
            <summary>
            Gets the path which should be prepended to <see cref="P:RestEase.Implementation.RequestInfo.Path"/>, if any
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.BasePath">
            <summary>
            Gets the path which should be prepended to <see cref="P:RestEase.Implementation.RequestInfo.Path"/> unless <see cref="P:RestEase.Implementation.RequestInfo.Path"/> starts with a '/', if any
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.Path">
            <summary>
            Gets the relative path to the resource to request
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.CancellationToken">
            <summary>
            Gets or sets the CancellationToken used to cancel the request
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.AllowAnyStatusCode">
            <summary>
            Gets or sets a value indicating whether to suppress the exception on invalid status codes
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.QueryParams">
            <summary>
            Gets the query parameters to append to the request URI
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.RawQueryParameters">
            <summary>
            Gets the raw query parameters
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.PathParams">
            <summary>
            Gets the parameters which should be substituted into placeholders in the Path
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.PathProperties">
            <summary>
            Gets the values from properties which should be substituted into placeholders in the Path
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.QueryProperties">
            <summary>
            Gets the values from properties which should be added to all query strings
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.HttpRequestMessageProperties">
            <summary>
            Gets the values from properties which should be added as request properties
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.ClassHeaders">
            <summary>
            Gets or sets the headers which were applied to the interface
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.PropertyHeaders">
            <summary>
            Gets the headers which were applied using properties
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.MethodHeaders">
            <summary>
            Gets the headers which were applied to the method being called
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.HeaderParams">
            <summary>
            Gets the headers which were passed to the method as parameters
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.BodyParameterInfo">
            <summary>
            Gets information the [Body] method parameter, if it exists
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RequestInfo.MethodInfo">
            <summary>
            Gets the MethodInfo of the interface method which was invoked
            </summary>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.RequestInfo"/> class
            </summary>
            <param name="method">HttpMethod to use when making the request</param>
            <param name="path">Relative path to request</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.#ctor(System.Net.Http.HttpMethod,System.String,System.Reflection.MethodInfo)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Implementation.RequestInfo"/> class
            </summary>
            <param name="method">HttpMethod to use when making the request</param>
            <param name="path">Relative path to request</param>
            <param name="methodInfo">MethodInfo for the method which was invoked</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddQueryParameter``1(RestEase.QuerySerializationMethod,System.String,``0,System.String)">
            <summary>
            Add a query parameter
            </summary>
            <remarks>value may be an IEnumerable, in which case each value is added separately</remarks>
            <typeparam name="T">Type of the value to add</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddQueryCollectionParameter``1(RestEase.QuerySerializationMethod,System.String,System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Add a collection of query parameter values under the same name
            </summary>
            <typeparam name="T">Type of the value to add</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="name">Name of the name/values pair</param>
            <param name="values">Values of the name/values pairs</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddQueryMap``2(RestEase.QuerySerializationMethod,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Add a query map to the query parameters list, where the type of value is scalar
            </summary>
            <typeparam name="TKey">Type of key in the query map</typeparam>
            <typeparam name="TValue">Type of value in the query map</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="queryMap">Query map to add</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddQueryCollectionMap``3(RestEase.QuerySerializationMethod,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Add a query map to the query parameters list, where the type of value is enumerable
            </summary>
            <typeparam name="TKey">Type of key in the query map</typeparam>
            <typeparam name="TValue">Type of value in the query map</typeparam>
            <typeparam name="TElement">Type of element in the value</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="queryMap">Query map to add</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddRawQueryParameter``1(``0)">
            <summary>
            Add a raw query parameter, which provides a string which is inserted verbatim into the query string
            </summary>
            <typeparam name="T">Type of the raw query parmaeter</typeparam>
            <param name="value">Raw query parameter</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddPathParameter``1(RestEase.PathSerializationMethod,System.String,``0,System.String,System.Boolean)">
            <summary>
            Add a path parameter: a [Path] method parameter which is used to substitute a placeholder in the path
            </summary>
            <typeparam name="T">Type of the value of the path parameter</typeparam>
            <param name="serializationMethod"></param>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
            <param name="urlEncode">Whether or not this path parameter should be URL-encoded</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddHttpRequestMessagePropertyParameter(System.String,System.Object)">
            <summary>
            Add a HTTP request message property parameter: a [RequestProperty] method parameter which is used to add HTTP request message property dictionary entry
            </summary>
            <param name="key">Key of the key/value pair</param>
            <param name="value">Value of the key/value pair</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddPathProperty``1(RestEase.PathSerializationMethod,System.String,``0,System.String,System.Boolean)">
            <summary>
            Add a path parameter from a property: a [Path] property which is used to substitute a placeholder in the path
            </summary>
            <typeparam name="T">Type of the value of the path parameter</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
            <param name="urlEncode">Whether or not this path parameter should be URL-encoded</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddQueryProperty``1(RestEase.QuerySerializationMethod,System.String,``0,System.String)">
            <summary>
            Add a query parameter from a property: a [Query] property which is used to append to the query string of all requests
            </summary>
            <typeparam name="T">Type of value of the query parameter</typeparam>
            <param name="serializationMethod">Method to use to serialize the value</param>
            <param name="name">Name of the name/value pair</param>
            <param name="value">Value of the name/value pair</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddHttpRequestMessagePropertyProperty(System.String,System.Object)">
            <summary>
            Add a HTTP request message property from a property: a [RequestProperty] property which is used to add HTTP request message property dictionary entry
            </summary>
            <param name="key">Key of the key/value pair</param>
            <param name="value">Value of the key/value pair</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddPropertyHeader``1(System.String,``0,System.String,System.String)">
            <summary>
            Add a property header
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
            <param name="defaultValue">Value to use if 'value' == null</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddMethodHeader(System.String,System.String)">
            <summary>
            Add a header which is defined on the method
            </summary>
            <param name="name">Name of the header to add</param>
            <param name="value">Value of the header to add</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.AddHeaderParameter``1(System.String,``0,System.String)">
            <summary>
            Add a header which is defined as a [Header("foo")] parameter to the method
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="name">Name of the header (passed to the HeaderAttribute)</param>
            <param name="value">Value of the header (value of the parameter)</param>
            <param name="format">Format string to use</param>
        </member>
        <member name="M:RestEase.Implementation.RequestInfo.SetBodyParameterInfo``1(RestEase.BodySerializationMethod,``0)">
            <summary>
            Set the body specified by the optional [Body] method parameter
            </summary>
            <param name="serializationMethod">Method to use to serialize the body</param>
            <param name="value">Body to serialize</param>
            <typeparam name="T">Type of the body's value</typeparam>
        </member>
        <member name="T:RestEase.Implementation.RestEaseInterfaceImplementationAttribute">
            <summary>
            Internal type. Do not use!
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RestEaseInterfaceImplementationAttribute.InterfaceType">
            <summary>
            Internal type. Do not use.
            </summary>
        </member>
        <member name="P:RestEase.Implementation.RestEaseInterfaceImplementationAttribute.ImplementationType">
            <summary>
            Internal type. Do not use.
            </summary>
        </member>
        <member name="M:RestEase.Implementation.RestEaseInterfaceImplementationAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Internal type. Do not use.
            </summary>
        </member>
        <member name="T:RestEase.Implementation.ToStringHelper">
            <summary>
            INTERNAL TYPE! This type may break between minor releases. Use at your own risk!
            
            Helper methods to turn a value into a string
            </summary>
        </member>
        <member name="M:RestEase.Implementation.ToStringHelper.ToString``1(``0,System.String,System.IFormatProvider)">
            <summary>
            Turns the given value into a string, passing it into <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> if it
            looks like a format string, otherwise using its <see cref="T:System.IFormattable"/> implementation if possible
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value to turn into a string</param>
            <param name="format">Format parameter, see description</param>
            <param name="formatProvider">Format provider to pass to <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/></param>
            <returns>String version of the input value</returns>
        </member>
        <member name="T:RestEase.Implementation.DiagnosticCode">
            <summary>
            Identifies the type of error / diagnostic encountered during emission
            </summary>
        </member>
        <member name="T:RestEase.Implementation.DiagnosticCodeExtensions">
            <summary>
            Extension methods on <see cref="T:RestEase.Implementation.DiagnosticCode"/>
            </summary>
        </member>
        <member name="M:RestEase.Implementation.DiagnosticCodeExtensions.Format(RestEase.Implementation.DiagnosticCode)">
            <summary>
            Format the code as e.g. REST001
            </summary>
        </member>
        <member name="T:RestEase.IRequestBodySerializer">
            <summary>
            Helper which knows how to serialize a request body
            </summary>
        </member>
        <member name="M:RestEase.IRequestBodySerializer.SerializeBody``1(``0)">
            <summary>
            Serialize the given request body
            </summary>
            <param name="body">Body to serialize</param>
            <typeparam name="T">Type of the body to serialize</typeparam>
            <returns>HttpContent to assign to the request</returns>
        </member>
        <member name="T:RestEase.IRequester">
            <summary>
            Called by the generated REST API implementation, this knows how to invoke the API and return a suitable response
            </summary>
        </member>
        <member name="M:RestEase.IRequester.RequestVoidAsync(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task
            </summary>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="M:RestEase.IRequester.RequestAsync``1(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task{T}
            </summary>
            <typeparam name="T">Type of response object expected by the caller</typeparam>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="M:RestEase.IRequester.RequestWithResponseMessageAsync(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task{HttpResponseMessage}
            </summary>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="M:RestEase.IRequester.RequestWithResponseAsync``1(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task{Response{T}}
            </summary>
            <typeparam name="T">Type of response object expected by the caller</typeparam>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="M:RestEase.IRequester.RequestStreamAsync(RestEase.IRequestInfo)">
            <summary>
            Invoked when the API interface method being called returns a Task{Stream}
            </summary>
            <param name="requestInfo">Object holding all information about the request</param>
            <returns>Task to return to the API interface caller</returns>
        </member>
        <member name="T:RestEase.IRequestInfo">
            <summary>
            Class containing information to construct a request from.
            An instance of this is created per request by the generated interface implementation
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.Method">
            <summary>
            Gets the HttpMethod which should be used to make the request
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.BaseAddress">
            <summary>
            Gets the path which should be prepended to <see cref="P:RestEase.IRequestInfo.Path"/>, if any
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.BasePath">
            <summary>
            Gets the path which should be prepended to <see cref="P:RestEase.IRequestInfo.Path"/> unless <see cref="P:RestEase.IRequestInfo.Path"/> starts with a '/', if any
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.Path">
            <summary>
            Gets the relative path to the resource to request
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.CancellationToken">
            <summary>
            Gets the CancellationToken used to cancel the request
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.AllowAnyStatusCode">
            <summary>
            Gets a value indicating whether to suppress the exception on invalid status codes
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.QueryParams">
            <summary>
            Gets the query parameters to append to the request URI
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.RawQueryParameters">
            <summary>
            Gets the raw query parameter infos
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.PathParams">
            <summary>
            Gets the parameters which should be substituted into placeholders in the Path
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.PathProperties">
            <summary>
            Gets the values from properties which should be substituted into placeholders in the Path
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.QueryProperties">
            <summary>
            Gets the values from properties which should be added to all query strings
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.HttpRequestMessageProperties">
            <summary>
            Gets the values from properties which should be added as HTTP request message properties
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.ClassHeaders">
            <summary>
            Gets the headers which were applied to the interface
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.PropertyHeaders">
            <summary>
            Gets the headers which were applied using properties
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.MethodHeaders">
            <summary>
            Gets the headers which were applied to the method being called
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.HeaderParams">
            <summary>
            Gets the headers which were passed to the method as parameters
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.BodyParameterInfo">
            <summary>
            Gets information the [Body] method parameter, if it exists
            </summary>
        </member>
        <member name="P:RestEase.IRequestInfo.MethodInfo">
            <summary>
            Gets the MethodInfo of the interface method which was invoked
            </summary>
        </member>
        <member name="T:RestEase.IRequestQueryParamSerializer">
            <summary>
            Helper which knows how to serialize query parmaeters
            </summary>
        </member>
        <member name="M:RestEase.IRequestQueryParamSerializer.SerializeQueryParam``1(System.String,``0,RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is scalar (not a collection), into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will only return a single KeyValuePair from this method. However, you are given the flexibility,
            to return multiple KeyValuePairs if you wish. Duplicate keys are allowed: they will be serialized as separate query parameters.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="value">Value of the query parameter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="M:RestEase.IRequestQueryParamSerializer.SerializeQueryCollectionParam``1(System.String,System.Collections.Generic.IEnumerable{``0},RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is a collection, into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will return a single KeyValuePair for each value in the collection, and all will have
            the same key. However this is not required: you can return whatever you want.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="values">Values of the query parmaeter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="T:RestEase.IResponseDeserializer">
            <summary>
            Helper capable of deserializing a response, to return to the caller
            </summary>
        </member>
        <member name="M:RestEase.IResponseDeserializer.Deserialize``1(System.String,System.Net.Http.HttpResponseMessage)">
            <summary>
            Read the response string from the response, deserialize, and return a deserialized object
            </summary>
            <typeparam name="T">Type of object to deserialize into</typeparam>
            <param name="content">String content read from the response</param>
            <param name="response">HttpResponseMessage. Consider calling response.Content.ReadAsStringAsync() to retrieve a string</param>
            <returns>Deserialized response</returns>
        </member>
        <member name="T:RestEase.JsonRequestBodySerializer">
            <summary>
            Default IRequestBodySerializer, using Json.NET
            </summary>
        </member>
        <member name="P:RestEase.JsonRequestBodySerializer.JsonSerializerSettings">
            <summary>
            Gets or sets the serializer settings to pass to JsonConvert.SerializeObject
            </summary>
        </member>
        <member name="M:RestEase.JsonRequestBodySerializer.SerializeBody``1(``0,RestEase.RequestBodySerializerInfo)">
            <inheritdoc/>
        </member>
        <member name="T:RestEase.JsonRequestQueryParamSerializer">
            <summary>
            Default IRequestParamSerializer, using Json.NET
            </summary>
        </member>
        <member name="P:RestEase.JsonRequestQueryParamSerializer.JsonSerializerSettings">
            <summary>
            Gets or sets the serializer settings to pass to JsonConvert.SerializeObject
            </summary>
        </member>
        <member name="M:RestEase.JsonRequestQueryParamSerializer.SerializeQueryParam``1(System.String,``0,RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is scalar (not a collection), into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will only return a single KeyValuePair from this method. However, you are given the flexibility,
            to return multiple KeyValuePairs if you wish. Duplicate keys are allowed: they will be serialized as separate query parameters.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="value">Value of the query parameter</param>
            <param name="info">Extra information which may be useful</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="M:RestEase.JsonRequestQueryParamSerializer.SerializeQueryCollectionParam``1(System.String,System.Collections.Generic.IEnumerable{``0},RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is a collection, into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will return a single KeyValuePair for each value in the collection, and all will have
            the same key. However this is not required: you can return whatever you want.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="values">Values of the query parmaeter</param>
            <param name="info">Extra information which may be useful</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="T:RestEase.JsonResponseDeserializer">
            <summary>
            Default implementation of IResponseDeserializer, using Json.NET
            </summary>
        </member>
        <member name="P:RestEase.JsonResponseDeserializer.JsonSerializerSettings">
            <summary>
            Gets or sets the serializer settings to pass to JsonConvert.DeserializeObject{T}
            </summary>
        </member>
        <member name="M:RestEase.JsonResponseDeserializer.Deserialize``1(System.String,System.Net.Http.HttpResponseMessage,RestEase.ResponseDeserializerInfo)">
            <inheritdoc/>
        </member>
        <member name="T:RestEase.QueryStringBuilder">
            <summary>
            Helper used to create a properly encoded query string for a request
            </summary>
        </member>
        <member name="M:RestEase.QueryStringBuilder.Build(RestEase.QueryStringBuilderInfo)">
            <summary>
            Override this method to return a suitably escaped query string
            </summary>
            <param name="info">Information about the request</param>
            <returns>The escaped query string</returns>
        </member>
        <member name="T:RestEase.QueryStringBuilderInfo">
            <summary>
            Encapsulates information provided to <see cref="T:RestEase.QueryStringBuilder"/>
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.InitialQueryString">
            <summary>
            Gets the initial query string, present from the URI the user specified in the Get/etc parameter
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.RawQueryParameters">
            <summary>
            Gets the raw query parameter, if any
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.RawQueryParameter">
            <summary>
            Obsolete. Use <see cref="P:RestEase.QueryStringBuilderInfo.RawQueryParameters"/>
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.QueryParams">
            <summary>
            Gets the query parameters (or an empty collection)
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.QueryProperties">
            <summary>
            Gets the query properties (or an empty collection)
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.RequestInfo">
            <summary>
            Gets the RequestInfo representing the request
            </summary>
        </member>
        <member name="P:RestEase.QueryStringBuilderInfo.FormatProvider">
            <summary>
            Gets the format provider, if any
            </summary>
        </member>
        <member name="M:RestEase.QueryStringBuilderInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryStringBuilderInfo"/> class
            </summary>
            <param name="initialQueryString">Initial query string, present from the URI the user specified in the Get/etc parameter</param>
            <param name="rawQueryParameters">The raw query parameters, if any</param>
            <param name="queryParams">The query parameters (or an empty collection)</param>
            <param name="queryProperties">The query propeorties (or an empty collection)</param>
            <param name="requestInfo">RequestInfo representing the request</param>
            <param name="formatProvider">Format provider to use to format things</param>
        </member>
        <member name="M:RestEase.QueryStringBuilderInfo.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Obsolete. Use the other constructor.
            </summary>
        </member>
        <member name="T:RestEase.RequestBodySerializer">
            <summary>
            Helper which knows how to serialize a request body
            </summary>
        </member>
        <member name="M:RestEase.RequestBodySerializer.SerializeBody``1(``0,RestEase.RequestBodySerializerInfo)">
            <summary>
            Serialize the given request body
            </summary>
            <param name="body">Body to serialize</param>
            <param name="info">Extra information about the request</param>
            <typeparam name="T">Type of the body to serialize</typeparam>
            <returns>HttpContent to assign to the request</returns>
        </member>
        <member name="T:RestEase.RequestBodySerializerInfo">
            <summary>
            Encapsulates extra information provided to <see cref="T:RestEase.RequestBodySerializer"/>
            </summary>
            <remarks>
            This is broken out as a separate structure so that extra properties can be added without breaking backwards compatibility
            </remarks>
        </member>
        <member name="P:RestEase.RequestBodySerializerInfo.RequestInfo">
            <summary>
            Gets information about the request
            </summary>
        </member>
        <member name="P:RestEase.RequestBodySerializerInfo.FormatProvider">
            <summary>
            Gets the format provider. If this is null, the default will be used.
            Specified by the user on <see cref="P:RestEase.RestClient.FormatProvider" />
            </summary>
        </member>
        <member name="M:RestEase.RequestBodySerializerInfo.#ctor(RestEase.IRequestInfo,System.IFormatProvider)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RequestBodySerializerInfo"/> structure
            </summary>
            <param name="requestInfo">Information about the request</param>
            <param name="formatProvider">Format provider to use</param>
        </member>
        <member name="T:RestEase.RequestModifier">
            <summary>
            Delegate used to modify outgoing HttpRequestMessages
            </summary>
            <param name="request">Request to modify</param>
            <param name="cancellationToken">CancellationToken to abort this request</param>
            <returns>A task which completes when modification has occurred</returns>
        </member>
        <member name="T:RestEase.RequestPathParamSerializer">
            <summary>
            Helper which knows how to serialize path parameters
            </summary>
        </member>
        <member name="M:RestEase.RequestPathParamSerializer.SerializePathParam``1(``0,RestEase.RequestPathParamSerializerInfo)">
            <summary>
            Serialize a path parameter whose value is scalar (not a collection), into a string value
            </summary>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="value">Value of the path parameter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A string value to use as path parameter</returns>
        </member>
        <member name="T:RestEase.RequestPathParamSerializerInfo">
            <summary>
            Encapsulates extra information provides to <see cref="T:RestEase.RequestPathParamSerializer"/>
            </summary>
            <remarks>
            This is broken out as a separate structure so that extra properties can be added without breaking backwards compatibility
            </remarks>
        </member>
        <member name="P:RestEase.RequestPathParamSerializerInfo.RequestInfo">
            <summary>
            Gets information about the request
            </summary>
        </member>
        <member name="P:RestEase.RequestPathParamSerializerInfo.Format">
            <summary>
            Gets the format string specified using <see cref="P:RestEase.PathAttribute.Format"/>
            </summary>
        </member>
        <member name="P:RestEase.RequestPathParamSerializerInfo.FormatProvider">
            <summary>
            Gets the format provider. If this is null, the default will be used.
            Specified by the user on <see cref="P:RestEase.RestClient.FormatProvider" />
            </summary>
        </member>
        <member name="M:RestEase.RequestPathParamSerializerInfo.#ctor(RestEase.IRequestInfo,System.String,System.IFormatProvider)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RequestPathParamSerializerInfo"/> structure
            </summary>
            <param name="requestInfo">Information about the request</param>
            <param name="format">Format string specified using <see cref="P:RestEase.PathAttribute.Format"/></param>
            <param name="formatProvider">Format provider to use</param>
        </member>
        <member name="T:RestEase.RequestQueryParamSerializer">
            <summary>
            Helper which knows how to serialize query parmaeters
            </summary>
        </member>
        <member name="M:RestEase.RequestQueryParamSerializer.SerializeQueryCollectionParam``1(System.String,System.Collections.Generic.IEnumerable{``0},RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is a collection, into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will return a single KeyValuePair for each value in the collection, and all will have
            the same key. However this is not required: you can return whatever you want.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="values">Values of the query parmaeter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="M:RestEase.RequestQueryParamSerializer.SerializeQueryParam``1(System.String,``0,RestEase.RequestQueryParamSerializerInfo)">
            <summary>
            Serialize a query parameter whose value is scalar (not a collection), into a collection of name -> value pairs
            </summary>
            <remarks>
            Most of the time, you will only return a single KeyValuePair from this method. However, you are given the flexibility,
            to return multiple KeyValuePairs if you wish. Duplicate keys are allowed: they will be serialized as separate query parameters.
            </remarks>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="name">Name of the query parameter</param>
            <param name="value">Value of the query parameter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A colletion of name -> value pairs to use as query parameters</returns>
        </member>
        <member name="T:RestEase.RequestQueryParamSerializerInfo">
            <summary>
            Encapsulates extra information provides to <see cref="T:RestEase.RequestQueryParamSerializer"/>
            </summary>
            <remarks>
            This is broken out as a separate structure so that extra properties can be added without breaking backwards compatibility
            </remarks>
        </member>
        <member name="P:RestEase.RequestQueryParamSerializerInfo.RequestInfo">
            <summary>
            Gets information about the request
            </summary>
        </member>
        <member name="P:RestEase.RequestQueryParamSerializerInfo.Format">
            <summary>
            Gets the format string specified using <see cref="P:RestEase.QueryAttribute.Format"/>
            </summary>
        </member>
        <member name="P:RestEase.RequestQueryParamSerializerInfo.FormatProvider">
            <summary>
            Gets the format provider. If this is null, the default will be used.
            Specified by the user on <see cref="P:RestEase.RestClient.FormatProvider" />
            </summary>
        </member>
        <member name="M:RestEase.RequestQueryParamSerializerInfo.#ctor(RestEase.IRequestInfo,System.String,System.IFormatProvider)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RequestQueryParamSerializerInfo"/> structure
            </summary>
            <param name="requestInfo">Information about the request</param>
            <param name="format">Format string specified using <see cref="P:RestEase.QueryAttribute.Format"/></param>
            <param name="formatProvider">Format provider to use</param>
        </member>
        <member name="T:RestEase.Response`1">
            <summary>
            Response containing both the HttpResponseMessage and deserialized response
            </summary>
            <typeparam name="T">Type of deserialized response</typeparam>
        </member>
        <member name="P:RestEase.Response`1.ResponseMessage">
            <summary>
            Gets the raw HttpResponseMessage
            </summary>
        </member>
        <member name="P:RestEase.Response`1.StringContent">
            <summary>
            Gets the string content of the response, if there is a response
            </summary>
        </member>
        <member name="M:RestEase.Response`1.GetContent">
            <summary>
            Gets the deserialized response
            </summary>
            <returns>The deserialized content</returns>
        </member>
        <member name="M:RestEase.Response`1.#ctor(System.String,System.Net.Http.HttpResponseMessage,System.Func{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.Response`1"/> class
            </summary>
            <param name="content">String content read from the response</param>
            <param name="response">HttpResponseMessage received</param>
            <param name="contentDeserializer">Func which will deserialize the content into a T</param>
        </member>
        <member name="M:RestEase.Response`1.Dispose">
            <summary>
            Disposes the underlying <see cref="T:System.Net.Http.HttpResponseMessage"/>
            </summary>
        </member>
        <member name="T:RestEase.ResponseDeserializer">
            <summary>
            Helper capable of deserializing a response, to return to the caller
            </summary>
        </member>
        <member name="P:RestEase.ResponseDeserializer.HandlesStrings">
            <summary>
            Gets or sets a value indicating whether this deserializer can deserialize strings
            </summary>
            <remarks>
            If <c>true</c>, interface methods which return <c>Task{string}</c> (or <c>Task{Response{string}}</c>
            result in the response being passed through this deserializer. If <c>false</c>, such methods result in
            the raw response being returned, and not passed through this deserializer.
            
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="M:RestEase.ResponseDeserializer.Deserialize``1(System.String,System.Net.Http.HttpResponseMessage,RestEase.ResponseDeserializerInfo)">
            <summary>
            Read the response string from the response, deserialize, and return a deserialized object
            </summary>
            <typeparam name="T">Type of object to deserialize into</typeparam>
            <param name="content">String content read from the response</param>
            <param name="response">HttpResponseMessage. Consider calling response.Content.ReadAsStringAsync() to retrieve a string</param>
            <param name="info">Extra information about the response</param>
            <returns>Deserialized response</returns>
        </member>
        <member name="T:RestEase.ResponseDeserializerInfo">
            <summary>
            Encapsulates extra information provides to <see cref="T:RestEase.ResponseDeserializer"/>
            </summary>
            <remarks>
            This is broken out as a separate structure so that extra properties can be added without breaking backwards compatibility
            </remarks>
        </member>
        <member name="P:RestEase.ResponseDeserializerInfo.RequestInfo">
            <summary>
            Gets information about the request
            </summary>
        </member>
        <member name="M:RestEase.ResponseDeserializerInfo.#ctor(RestEase.IRequestInfo)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.ResponseDeserializerInfo"/> structure
            </summary>
            <param name="requestInfo">Information about the request</param>
        </member>
        <member name="T:RestEase.RestClient">
            <summary>
            Creates REST API clients from a suitable interface. Your single point of interaction with RestEase
            </summary>
        </member>
        <member name="F:RestEase.RestClient.FactoryAssemblyName">
            <summary>
            Name of the assembly in which interface implementations are built. Use in [assembly: InternalsVisibleTo(RestEase.FactoryAssemblyName)] to allow clients to be generated for internal interface types
            </summary>
        </member>
        <member name="F:RestEase.RestClient.HttpRequestMessageRequestInfoPropertyKey">
            <summary>
            Name of the key in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/> that a request's <see cref="T:RestEase.IRequestInfo"/> is stored
            </summary>
        </member>
        <member name="P:RestEase.RestClient.JsonSerializerSettings">
            <summary>
            Gets or sets the JsonSerializerSettings to use with all non-overridden serializers / deserializers
            </summary>
        </member>
        <member name="P:RestEase.RestClient.ResponseDeserializer">
             <summary>
             Gets or sets the deserializer used to deserialize responses
             </summary>
             <remarks>
             Defaults to <see cref="T:RestEase.JsonResponseDeserializer"/>.
            
             This has the type <see cref="T:RestEase.IResponseDeserializer"/> for backwards-compatibility reasons. You should assign
             an instance of <see cref="P:RestEase.RestClient.ResponseDeserializer"/>
             </remarks>
        </member>
        <member name="P:RestEase.RestClient.RequestBodySerializer">
             <summary>
             Gets or sets the serializer used to serialize request bodies (when [Body(BodySerializationMethod.Serialized)] is used)
             </summary>
             <remarks>
             Defaults to <see cref="T:RestEase.JsonRequestBodySerializer"/>.
            
             This has the type <see cref="T:RestEase.IRequestBodySerializer"/> for backwards-compatibility reasons. You should assign
             an instance of <see cref="P:RestEase.RestClient.RequestBodySerializer"/>.
             </remarks>
        </member>
        <member name="P:RestEase.RestClient.RequestPathParamSerializer">
            <summary>
            Gets or sets the serializer used to serialize path parameters (when [Path(PathSerializationMethod.Serialized)] is used)
            </summary>
            <remarks>
            Has no default value, explicit serializer implementation must be provided.
            </remarks>
        </member>
        <member name="P:RestEase.RestClient.RequestQueryParamSerializer">
             <summary>
             Gets or sets the serializer used to serialize query parameters (when [Query(QuerySerializationMethod.Serialized)] is used)
             </summary>
             <remarks>
             Defaults to <see cref="T:RestEase.JsonRequestQueryParamSerializer"/>.
            
             This has the type <see cref="T:RestEase.IRequestQueryParamSerializer"/> for backwards-compatibility reasons. You should assign
             an instance of <see cref="P:RestEase.RestClient.RequestQueryParamSerializer"/>.
             </remarks>
        </member>
        <member name="P:RestEase.RestClient.QueryStringBuilder">
            <summary>
            Gets or sets the builder to use to construct encoded query strings from various parmaeters
            </summary>
            <remarks>
            Defaults to null, in which case the default building logic is used
            </remarks>
        </member>
        <member name="P:RestEase.RestClient.FormatProvider">
            <summary>
            Gets or sets the <see cref="T:System.IFormatProvider"/> used to format items using <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
            <remarks>
            Defaults to null, in which case the current culture is used.
            </remarks>
        </member>
        <member name="M:RestEase.RestClient.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, without a Base Address.
            The interface should have an absolute <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>,
            or should only use absolute paths.
            </summary>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, with the given Base URL
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String)">
            <summary>
            Creates a new client with the given Base URL
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.Uri)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, with the given Base URL
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Uri)">
            <summary>
            Creates a new client with the given Base URL
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(RestEase.RequestModifier)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, without a Base Address.
            The interface should have an absolute <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>,
            or should only use absolute paths.
            </summary>
            <param name="requestModifier">Delegate to be called on every request</param>
        </member>
        <member name="M:RestEase.RestClient.For``1(RestEase.RequestModifier)">
            <summary>
            Creates a new client without a Base Address, with the given <see cref="T:RestEase.RequestModifier"/>
            The interface should have an absolute <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>,
            or should only use absolute paths.
            </summary>
            <param name="requestModifier">Delegate called on every request</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.String,RestEase.RequestModifier)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, with the given Base URL and request modifier
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)</param>
            <param name="requestModifier">Delegate called on every request</param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,RestEase.RequestModifier)">
            <summary>
            Creates a new client with the given Base URL and <see cref="T:RestEase.RequestModifier"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)</param>
            <param name="requestModifier">Delegate called on every request</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.Uri,RestEase.RequestModifier)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, with the given Base URL and request modifier
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="requestModifier">Delegate called on every request</param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Uri,RestEase.RequestModifier)">
            <summary>
            Creates a new client with the given Base URL and <see cref="T:RestEase.RequestModifier"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="requestModifier">Delegate called on every request</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class with the given <see cref="T:System.Net.Http.HttpMessageHandler"/>,
            without a Base Address. The interface should have an absolute <see cref="T:RestEase.BaseAddressAttribute"/> or
            <see cref="T:RestEase.BasePathAttribute"/>, or should only use absolute paths.
            </summary>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new client with the given <see cref="T:System.Net.Http.HttpMessageHandler"/>, without a Base Address.
            The interface should have an absolute <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>,
            or should only use absolute paths.
            </summary>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class with the given Base URL and <see cref="T:System.Net.Http.HttpMessageHandler"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new client with the given Base URL and <see cref="T:System.Net.Http.HttpMessageHandler"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.Uri,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class with the given Base URL and <see cref="T:System.Net.Http.HttpMessageHandler"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Uri,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new client with the given Base URL and <see cref="T:System.Net.Http.HttpMessageHandler"/>
            </summary>
            <param name="baseUrl">
            Base address to use for requests (may be <c>null</c> if your interface has an absolute
            <see cref="T:RestEase.BaseAddressAttribute"/> or <see cref="T:RestEase.BasePathAttribute"/>, or only uses absolute paths)
            </param>
            <param name="messageHandler">
            <see cref="T:System.Net.Http.HttpMessageHandler"/> to use. If this is an instance of <see cref="T:System.Net.Http.DelegatingHandler"/> with
            <see cref="P:System.Net.Http.DelegatingHandler.InnerHandler"/> set to <c>null</c>, then a new instance of
            <see cref="T:System.Net.Http.HttpClientHandler"/> will be assigned
            </param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RestClient"/> class, using the given HttpClient
            </summary>
            <param name="httpClient">HttpClient to use</param>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Net.Http.HttpClient)">
            <summary>
            Creates a new client using the given HttpClient
            </summary>
            <param name="httpClient">HttpClient to use</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For(System.Type)">
            <summary>
            Create an implementation for the given API interface
            </summary>
            <param name="type">Type of interface to implement</param>
            <returns>An implementation which can be used to make REST requests</returns>
        </member>
        <member name="M:RestEase.RestClient.For(System.Type,RestEase.IRequester)">
            <summary>
            Create a client using the given IRequester. This gives you the greatest ability to customise functionality
            </summary>
            <param name="type">Interface representing the API</param>
            <param name="requester">IRequester to use</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1">
            <summary>
            Create an implementation for the given API interface
            </summary>
            <typeparam name="T">Type of interface to implement</typeparam>
            <returns>An implementation which can be used to make REST requests</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(RestEase.IRequester)">
            <summary>
            Create a client using the given IRequester. This gives you the greatest ability to customise functionality
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="requester">IRequester to use</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Create a client using the given base URL and Json.NET serializer settings
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">Base URL</param>
            <param name="jsonSerializerSettings">Serializer settings to pass to Json.NET</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,RestEase.RequestModifier,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Create a client using the given base URL and Json.NET serializer settings
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">Base URL</param>
            <param name="requestModifier">Delegate called on every request</param>
            <param name="jsonSerializerSettings">Serializer settings to pass to Json.NET</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,RestEase.ResponseDeserializer,RestEase.RequestBodySerializer)">
            <summary>
            Create a client using the given base URL, and custom serializer and/or deserializer
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">Base URL</param>
            <param name="responseDeserializer">Deserializer to use when deserializing responses</param>
            <param name="requestBodySerializer">Serializer to use when serializing request bodies, when appropriate</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.String,RestEase.RequestModifier,RestEase.ResponseDeserializer,RestEase.RequestBodySerializer)">
            <summary>
            Create a client using the given base URL, and custom serializer and/or deserializer
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="baseUrl">Base URL</param>
            <param name="requestModifier">Delegate called on every request</param>
            <param name="responseDeserializer">Deserializer to use when deserializing responses</param>
            <param name="requestBodySerializer">Serializer to use when serializing request bodiess, when appropriate</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Net.Http.HttpClient,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Create a client using the given HttpClient and Json.NET serializer settings
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="httpClient">HttpClient to use to make requests</param>
            <param name="jsonSerializerSettings">Serializer settings to pass to Json.NET</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="M:RestEase.RestClient.For``1(System.Net.Http.HttpClient,RestEase.ResponseDeserializer,RestEase.RequestBodySerializer)">
            <summary>
            Create a client using the given HttpClient, and custom serializer and/or deserializer
            </summary>
            <typeparam name="T">Interface representing the API</typeparam>
            <param name="httpClient">HttpClient to use to make requests</param>
            <param name="responseDeserializer">Deserializer to use when deserializing responses</param>
            <param name="requestBodySerializer">Serializer to use when serializing request bodies, when appropriate</param>
            <returns>An implementation of that interface which you can use to invoke the API</returns>
        </member>
        <member name="T:RestEase.StringEnumRequestPathParamSerializer">
            <inheritdoc />
            <summary>
            A serializer that handles enum values specially, serializing them into their display value
            as defined by a EnumMember, DisplayName, or Display attribute (in that order).
            </summary>
        </member>
        <member name="M:RestEase.StringEnumRequestPathParamSerializer.SerializePathParam``1(``0,RestEase.RequestPathParamSerializerInfo)">
            <inheritdoc />
            <summary>
            Serialize a path parameter whose value is scalar (not a collection), into a string value
            </summary>
            <typeparam name="T">Type of the value to serialize</typeparam>
            <param name="value">Value of the path parameter</param>
            <param name="info">Extra info which may be useful to the serializer</param>
            <returns>A string value to use as path parameter</returns>
            <remarks>
            If the value is an enum value, the serializer will check if it has an EnumMember, DisplayName or Display
            attribute, and if so return the value of that instead (in that order of preference).
            </remarks>
        </member>
        <member name="T:RestEase.AllowAnyStatusCodeAttribute">
            <summary>
            Controls whether the given method, or all methods within the given interface, will throw an exception if the response status code does not indicate success
            </summary>
        </member>
        <member name="P:RestEase.AllowAnyStatusCodeAttribute.AllowAnyStatusCode">
            <summary>
            Gets or sets a value indicating whether to suppress the exception normally thrown on responses that do not indicate success
            </summary>
        </member>
        <member name="M:RestEase.AllowAnyStatusCodeAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.AllowAnyStatusCodeAttribute"/> class, which does allow any status code
            </summary>
        </member>
        <member name="M:RestEase.AllowAnyStatusCodeAttribute.#ctor(System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.AllowAnyStatusCodeAttribute"/> classe whi
            </summary>
            <param name="allowAnyStatusCode">True to allow any response status code; False to throw an exception on response status codes that do not indicate success</param>
        </member>
        <member name="T:RestEase.BaseAddressAttribute">
            <summary>
            Attribute applied to the interface, giving a base address which is used if <see cref="P:System.Net.Http.HttpClient.BaseAddress"/> is <c>null</c>
            </summary>
        </member>
        <member name="P:RestEase.BaseAddressAttribute.BaseAddress">
            <summary>
            Gets the base address set in this attribute
            </summary>
        </member>
        <member name="M:RestEase.BaseAddressAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.BaseAddressAttribute"/> class with the given base address
            </summary>
            <param name="baseAddress">Base path to use</param>
        </member>
        <member name="T:RestEase.BasePathAttribute">
            <summary>
            Attribute applied to the interface, giving a path which is prepended to all paths 
            </summary>
        </member>
        <member name="P:RestEase.BasePathAttribute.BasePath">
            <summary>
            Gets the base path set in this attribute
            </summary>
        </member>
        <member name="M:RestEase.BasePathAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.BasePathAttribute"/> class with the given base path
            </summary>
            <param name="basePath">Base path to use</param>
        </member>
        <member name="T:RestEase.BodyAttribute">
            <summary>
            Attribute specifying that this parameter should be interpreted as the request body
            </summary>
        </member>
        <member name="P:RestEase.BodyAttribute.SerializationMethod">
            <summary>
            Gets the serialization method to use. Defaults to BodySerializationMethod.Serialized
            </summary>
        </member>
        <member name="M:RestEase.BodyAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.BodyAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.BodyAttribute.#ctor(RestEase.BodySerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.BodyAttribute"/> class, using the given body serialization method
            </summary>
            <param name="serializationMethod">Serialization method to use when serializing the body object</param>
        </member>
        <member name="T:RestEase.BodySerializationMethod">
            <summary>
            Type of serialization that should be applied to the body
            </summary>
        </member>
        <member name="F:RestEase.BodySerializationMethod.Serialized">
            <summary>
            Serialized using the configured IRequestBodySerializer (uses Json.NET by default)
            </summary>
        </member>
        <member name="F:RestEase.BodySerializationMethod.UrlEncoded">
            <summary>
            Serialized using Form URL Encoding. The body must implement IDictionary
            </summary>
        </member>
        <member name="F:RestEase.BodySerializationMethod.Default">
            <summary>
            Use the default serialization method. You probably don't want to specify this yourself
            </summary>
        </member>
        <member name="T:RestEase.HeaderAttribute">
            <summary>
            Attribute allowing interface-level, method-level, or parameter-level headers to be defined. See the docs for details
            </summary>
        </member>
        <member name="P:RestEase.HeaderAttribute.Name">
            <summary>
            Gets the Name of the header
            </summary>
        </member>
        <member name="P:RestEase.HeaderAttribute.Value">
            <summary>
            Gets the value of the header, if present
            </summary>
        </member>
        <member name="P:RestEase.HeaderAttribute.Format">
            <summary>
            Gets or sets the format string used to format the value, if this is used as a variable header
            (i.e. <see cref="P:RestEase.HeaderAttribute.Value"/> is null).
            </summary>
            <remarks>
            If this looks like a format string which can be passed to <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>,
            (i.e. it contains at least one format placeholder), then this happens with the value passed as the first arg.
            Otherwise, if the value implements <see cref="T:System.IFormattable"/>, this is passed to the value's
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method. Otherwise this is ignored.
            Example values: "X2", "{0:X2}", "test{0}".
            </remarks>
        </member>
        <member name="M:RestEase.HeaderAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HeaderAttribute"/> class
            </summary>#
            
            <param name="name">Name of the header</param>
        </member>
        <member name="M:RestEase.HeaderAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HeaderAttribute"/> class
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
        </member>
        <member name="T:RestEase.HttpRequestMessagePropertyAttribute">
            <summary>
            Marks a parameter as HTTP request message property
            </summary>
        </member>
        <member name="P:RestEase.HttpRequestMessagePropertyAttribute.Key">
            <summary>
            Gets or sets the optional key of the parameter. Will use the parameter name if null
            </summary>
        </member>
        <member name="M:RestEase.HttpRequestMessagePropertyAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HttpRequestMessagePropertyAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.HttpRequestMessagePropertyAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HttpRequestMessagePropertyAttribute"/> class, with the given key
            </summary>
            <param name="key">key</param>
        </member>
        <member name="T:RestEase.PathAttribute">
            <summary>
            Marks a parameter as able to substitute a placeholder in this method's path
            </summary>
        </member>
        <member name="P:RestEase.PathAttribute.Name">
            <summary>
            Gets or sets the optional name of the placeholder. Will use the parameter name if null
            </summary>
        </member>
        <member name="P:RestEase.PathAttribute.SerializationMethod">
            <summary>
            Gets the serialization method to use to serialize the value. Defaults to PathSerializationMethod.ToString
            </summary>
        </member>
        <member name="P:RestEase.PathAttribute.Format">
            <summary>
            Gets or sets the format string used to format the value
            </summary>
            <remarks>
            If <see cref="P:RestEase.PathAttribute.SerializationMethod"/> is <see cref="F:RestEase.PathSerializationMethod.Serialized"/>, this is passed to the serializer
            as <see cref="P:RestEase.RequestPathParamSerializerInfo.Format"/>.
            Otherwise, if this looks like a format string which can be passed to <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>,
            (i.e. it contains at least one format placeholder), then this happens with the value passed as the first arg.
            Otherwise, if the value implements <see cref="T:System.IFormattable"/>, this is passed to the value's
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method. Otherwise this is ignored.
            Example values: "X2", "{0:X2}", "test{0}".
            </remarks>
        </member>
        <member name="P:RestEase.PathAttribute.UrlEncode">
            <summary>
            Gets or sets a value indicating whether this path parameter should be URL-encoded. Defaults to true.
            </summary>
        </member>
        <member name="M:RestEase.PathAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PathAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.PathAttribute.#ctor(RestEase.PathSerializationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:RestEase.PathAttribute"/> class, with the given serialization method
            </summary>
            <param name="serializationMethod">Serialization method to use to serialize the value</param>
        </member>
        <member name="M:RestEase.PathAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PathAttribute"/> class, with the given name
            </summary>
            <param name="name">Placeholder in the path to replace</param>
        </member>
        <member name="M:RestEase.PathAttribute.#ctor(System.String,RestEase.PathSerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PathAttribute"/> class, with the given name and serialization method
            </summary>
            <param name="name">Placeholder in the path to replace</param>
            <param name="serializationMethod">Serialization method to use to serialize the value</param>
        </member>
        <member name="T:RestEase.PathSerializationMethod">
            <summary>
            Type of serialization that should be applied to the path parameter's value
            </summary>
        </member>
        <member name="F:RestEase.PathSerializationMethod.ToString">
            <summary>
            Serialized using its .ToString() method
            </summary>
        </member>
        <member name="F:RestEase.PathSerializationMethod.Serialized">
            <summary>
            Serialized using the configured RequestPathParamSerializer
            </summary>
        </member>
        <member name="F:RestEase.PathSerializationMethod.Default">
            <summary>
            Use the default serialization method. You probably don't want to specify this yourself
            </summary>
        </member>
        <member name="T:RestEase.QueryAttribute">
            <summary>
            Marks a parameter as being a query param
            </summary>
        </member>
        <member name="P:RestEase.QueryAttribute.Name">
            <summary>
            Gets or sets the name of the query param. Will use the parameter / property name if unset.
            </summary>
        </member>
        <member name="P:RestEase.QueryAttribute.HasName">
            <summary>
            Gets a value indicating whether the user has set the name attribute
            </summary>
        </member>
        <member name="P:RestEase.QueryAttribute.SerializationMethod">
            <summary>
            Gets the serialization method to use to serialize the value. Defaults to QuerySerializationMethod.ToString
            </summary>
        </member>
        <member name="P:RestEase.QueryAttribute.Format">
            <summary>
            Gets or sets the format string used to format the value
            </summary>
            <remarks>
            If <see cref="P:RestEase.QueryAttribute.SerializationMethod"/> is <see cref="F:RestEase.QuerySerializationMethod.Serialized"/>, this is passed to the serializer
            as <see cref="P:RestEase.RequestQueryParamSerializerInfo.Format"/>.
            Otherwise, if this looks like a format string which can be passed to <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>,
            (i.e. it contains at least one format placeholder), then this happens with the value passed as the first arg.
            Otherwise, if the value implements <see cref="T:System.IFormattable"/>, this is passed to the value's
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> method. Otherwise this is ignored.
            Example values: "X2", "{0:X2}", "test{0}".
            </remarks>
        </member>
        <member name="M:RestEase.QueryAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.QueryAttribute.#ctor(RestEase.QuerySerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryAttribute"/> class, with the given serialization method
            </summary>
            <param name="serializationMethod">Serialization method to use to serialize the value</param>
        </member>
        <member name="M:RestEase.QueryAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryAttribute"/> class, with the given name
            </summary>
            <param name="name">Name of the query parameter</param>
        </member>
        <member name="M:RestEase.QueryAttribute.#ctor(System.String,RestEase.QuerySerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryAttribute"/> class, with the given name and serialization method
            </summary>
            <param name="name">Name of the query parameter</param>
            <param name="serializationMethod">Serialization method to use to serialize the value</param>
        </member>
        <member name="T:RestEase.QueryMapAttribute">
            <summary>
            Marks a parameter as being the method's Query Map
            </summary>
        </member>
        <member name="P:RestEase.QueryMapAttribute.SerializationMethod">
            <summary>
            Gets and sets the serialization method to use to serialize the value. Defaults to QuerySerializationMethod.ToString
            </summary>
        </member>
        <member name="M:RestEase.QueryMapAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryMapAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.QueryMapAttribute.#ctor(RestEase.QuerySerializationMethod)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.QueryMapAttribute"/> with the given serialization method
            </summary>
            <param name="serializationMethod">Serialization method to use to serialize the value</param>
        </member>
        <member name="T:RestEase.QuerySerializationMethod">
            <summary>
            Type of serialization that should be applied to the query parameter's value
            </summary>
        </member>
        <member name="F:RestEase.QuerySerializationMethod.ToString">
            <summary>
            Serialized using its .ToString() method
            </summary>
        </member>
        <member name="F:RestEase.QuerySerializationMethod.Serialized">
            <summary>
            Serialized using the configured IRequestQueryParamSerializer (uses Json.NET by default)
            </summary>
        </member>
        <member name="F:RestEase.QuerySerializationMethod.Default">
            <summary>
            Use the default serialization method. You probably don't want to specify this yourself
            </summary>
        </member>
        <member name="T:RestEase.RawQueryStringAttribute">
            <summary>
            Marks a parameter as being a raw query string, which is inserted as-is into the query string
            </summary>
        </member>
        <member name="T:RestEase.RequestAttributeBase">
            <summary>
            Base class for all request attributes
            </summary>
        </member>
        <member name="P:RestEase.RequestAttributeBase.Method">
            <summary>
            Gets the HTTP method to use (Get/Post/etc)
            </summary>
        </member>
        <member name="P:RestEase.RequestAttributeBase.Path">
            <summary>
            Gets or sets the path to request. This is relative to the base path configured when RestService.For was called, and can contain placeholders
            </summary>
        </member>
        <member name="T:RestEase.RequestAttribute">
            <summary>
            Attribute for custom HTTP methods which aren't represented by other subclasses of RequestAttributeBase
            </summary>
        </member>
        <member name="M:RestEase.RequestAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RequestAttribute"/> class, with the given HttpMethod.
            </summary>
            <remarks>
            Use this if there isn't a <see cref="T:RestEase.RequestAttribute"/> subclass for the HTTP method you want to use
            </remarks>
            <param name="httpMethod">HTTP Method to use, e.g. "PATCH"</param>
        </member>
        <member name="M:RestEase.RequestAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.RequestAttribute"/> class, with the given HttpMethod and relative path.
            </summary>
            <remarks>
            Use this if there isn't a <see cref="T:RestEase.RequestAttribute"/> subclass for the HTTP method you want to use
            </remarks>
            <param name="httpMethod">HTTP Method to use, e.g. "PATCH"</param>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.DeleteAttribute">
            <summary>
            Delete request
            </summary>
        </member>
        <member name="M:RestEase.DeleteAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.DeleteAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.DeleteAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.DeleteAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.GetAttribute">
            <summary>
            Get request
            </summary>
        </member>
        <member name="M:RestEase.GetAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.GetAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.GetAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.GetAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.HeadAttribute">
            <summary>
            Head request
            </summary>
        </member>
        <member name="M:RestEase.HeadAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HeadAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.HeadAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.HeadAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.OptionsAttribute">
            <summary>
            Options request
            </summary>
        </member>
        <member name="M:RestEase.OptionsAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.OptionsAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.OptionsAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.OptionsAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.PostAttribute">
            <summary>
            Post request
            </summary>
        </member>
        <member name="M:RestEase.PostAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PostAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.PostAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PostAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.PutAttribute">
            <summary>
            Put request
            </summary>
        </member>
        <member name="M:RestEase.PutAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PutAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.PutAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PutAttribute"/> class, with the given relativ epath
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.TraceAttribute">
            <summary>
            Trace request
            </summary>
        </member>
        <member name="M:RestEase.TraceAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.TraceAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.TraceAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.TraceAttribute"/> class, with the given relative path
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.PatchAttribute">
            <summary>
            Patch request
            </summary>
        </member>
        <member name="P:RestEase.PatchAttribute.PatchMethod">
            <summary>
            Gets a static instance of <see cref="T:System.Net.Http.HttpMethod"/> corresponding to a PATCH request
            </summary>
        </member>
        <member name="M:RestEase.PatchAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PatchAttribute"/> class
            </summary>
        </member>
        <member name="M:RestEase.PatchAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.PatchAttribute"/> class, with the given relativ epath
            </summary>
            <param name="path">Relative path to use</param>
        </member>
        <member name="T:RestEase.SerializationMethodsAttribute">
            <summary>
            Specifies the default serialization methods for query parameters and request bodies (which can then be overridden)
            </summary>
        </member>
        <member name="P:RestEase.SerializationMethodsAttribute.Body">
            <summary>
            Gets and sets the serialization method used to serialize request bodies. Defaults to BodySerializationMethod.Serialized
            </summary>
        </member>
        <member name="P:RestEase.SerializationMethodsAttribute.Query">
            <summary>
            Gets and sets the serialization method used to serialize query parameters. Defaults to QuerySerializationMethod.ToString
            </summary>
        </member>
        <member name="P:RestEase.SerializationMethodsAttribute.Path">
            <summary>
            Gets and sets the serialization method used to serialize path parameters. Default to PathSerializationMethod.ToString
            </summary>
        </member>
        <member name="M:RestEase.SerializationMethodsAttribute.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:RestEase.SerializationMethodsAttribute"/> class
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
